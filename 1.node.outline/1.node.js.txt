1.node.js란?
  1) ~ 1995 이전 : HTML + CSS --> 웹사이트 개발
     ~ 1995 이후 : HTML + CSS + JavaScript --> 웹 사이트 개발
  2) JavaScript
    -Netscape 사에서 개발한 live script > Mocha > JavaScript 12월 발표
  
  3) 브라우저 지원하는 자바스크립트 엔진
    - 사파리(Safari) : JavaScript Core
    - IE(MS) : Chakra
    - Firefox : Spider Monkey
    - Chrome : V8(JIT Just-in-Time comilation)
    - Edage(MS) : Chakra -> 2021년도에 V8엔진을 탑재함

  4) 2009년 Ryan Dahl(라이언 달)이 node.js를 발표
    Deno : 자바스크립트 환경 개발자 - TypeScript  런타임 최초 개발자
    -- JavaScript everywhere --
  5) Node.js 는 
    '크롬의 V8엔진을 탑재하고 있는 자바스크립트 런타임 환경이다.'
    'JavaScript code outside a web browser.'


  6) Browser VS Node.js
    Browser => 동적인 웹 애플리케이션 구현 가능
              --------------------------------
                Web API - Windows, Document, Ajax, Json...

    Node.js => 서버와 서버간의 렌더링, 백엔드 서버 구현, 
                프론트 엔드 개발 등...(I/O가 많은 서비스에 용이)
                ------------------------------------
                Node API

2. Node.js 를 어떻게 공부할 것인가?
  1) Node의 구조를 정확히 이해하고 실행방식을 기억한다.
  2) Node에서 제공하는 API를 잘 사용할 줄 알아야 한다.
    API는 자바스크립트 문법으로 작성되었으므로, 문법을 
    정확히 익히도록 한다.
  3) 개발을 편리하게 지원해주는 프레임워크에 대해서 익힌다.
     Node.js --> Express, Rust
     Web API(브라우저) --> React, Vue

  3. Node.js 특징 4가지
    1) JavaScript Runtime
      - V8 엔진 탑재 -> EcmaScript 6, Open Source, Node API...
    2) Single Thread
      - Process(Multi Thread) vs Thread

    3) Non-Blocking(비동기적)I/O

    4) Event - Driven



4. 실행환경 만들기
1) node.js 설치 : http://nodejs.org  (노드버전 꼭 확인하기)
2) 터미널 툴 설치 : 윈도우 : http://cmdder.app
 풀버전다운로드 > exe실행
 3)개발툴설치 :VSC 등..
 4)GIt 설치 및 github연동

 5. REPL - 터미널 환경에서 실행
    R : Read, E : Eval, P : Print, L : Loop

6. console 로그에 대한 API 검색 및 활용 - 2. console.js

7.this 정리(global,object) - 3.this.js
8.export/require - node, Blocking
 export/import -JavaScript, Non-blocking
9.os - 운영체제 정보
1)os
2)Process
3)path
4)FileSystem
5)Stream & Buffer

10.npm(node Package Manger)

npmjs.com

노드에서 외부 라이브러리 사용과 프로젝트 관리를 위함

오픈 소스로 제공되며, 천백만명의 개발자들이 사용하는 큰 커뮤니티로 백만개 이상의 라이브러리 존재

NPX는 다운로드하여 저장하지 않고 바로 실행

yarn는 페이스북에서 만든 npm에서 제기되는 문제점을 해결하고자 만듬, React에서 주로 사용되며 NPM과 호환이 됨

11. HTTP/HTTPS(전송규칙,프로토콜)
1)HTTP/HTTPS
-Hypertext Transfer Protocol
(Request - Response Protocol)

<HTTP>
          request(URL:http://www.naver.com/index.do)
client ----------------> server
       <----------------
          response(HTML)
               |
        데이터를 가로채는 경우발생

<HTTPS>
-Hypertext Transfer Protocol Secure
          request(URL:https://www.naver.com/index.do)
client ----------------> server
       <----------------
          response(HTML): SSN, TSL 등 공개키를 사용한 암호화되어 전송
               |
        데이터를 가로채는 경우 감소



2)Status Codes
 - 서버가 클라이언트가 요청한 처리상태를 숫자(3자리숫자, 5개범위)로 전송하는 코드
 1xx: Information
      100(continue)- 요청이 정상적이며,계속 진행 가능 
      102(Processing) - 요청한 것을 아직 처리 중 

 2xx: Redirection
       200(ok) - 성공 메세지
       201(created) - 클라이언트가 요청한 리소스 생성이 성공함
       204(no content) - 클라이언트 요청 처리 완료 전송할 컨텐츠는 없음

 3xx: Redirection
      301(Moved Permanently) - 요청한 페이지가 영구적으로 다른곳으로 이동
      302(Found) - 요청한 페이지가 임시적으로 다른 곳으로 이동
      303(See Other) - 302와 동일한 의미 , 단 Get 방식만 사용가능 

 4xx:Client error
      400(Bad Request) - 요청한 쿼리가 잘못된 경우  
      http://www.naver.com/login.jsp?id=test
      401(Unauthorized) - 로그인 등 권한이 없는 클라이언트가 요청한 경우
      403(Forbidden) - 로그인한 사용자이지만 특정한 일을 수행할 권한이 없는 클라이언트
      404(Not Found) - URL이 존재하지 않을 때
      405(Method Not Allowed) - 요청한 기능이 허용되지 않을때
 
 5xx: Server error 
      500(Internal Server Error) - 서버에서 요청을 처리할 수 없는 경우 전송  
      502(Bad Gateway) - 중간에 서버 요청을 어떻게 처리해야 할지 모르는 경우 전송 
      503(Service Unavailable) - URL에서 요청한 특정한 처리상태를 하기 위한 준비가 아직 안되었을때  


3)Request
- URL : Uniform Resource Location
https://www.server.com:80/courser/frontend/js/search?a=123
-------       ---------    -----------------------   ------
프로토콜(protocol) 호스트네임(hostname)  pathname       쿼리(query -string)
                   80은 생략가능
- Method : 요청하는 방식(GET/POST/PUT/...)
MDN - https://developer.mozilla.org/ko/docs/Web/HTTP/Methods
GET - get : 서버에서 해당 리소스를 가져오고 싶을 떄
POST - created : URL이 가리키는 곳에 무엇인가를 생성하고 싶을때,
                 전송하는 데이터의 용량이 큰 경우..
PUT - replace : URL에 있는 데이터를 업데이트 하고 싶을떄
DELETE - delete : URL에 있는 데이터를 삭제하고 싶을 떄
PATCH - replace partially : 부분적으로 업데이트 하고 싶을 떄
HEAD - get without body : 데이터를 받지는 않고 HEAD만 받고 싶을때
OPTIONS - all supported methods for URL 
 : 해당 URL에서 사용 가능한 모든 메소드 정보를 옵션을 알고 싶을 때
TRACE - echoes the received request
  : 요청에 대한 서버의 반응 상태를 확인할 떄



[GET] - 200, 401, 403, 404, 405 ..
[POST] - 201, 40414, 403, 404, 409..
[PUT/DELETE/PATCH] - 200, 204, 404, 405 ..
[ HEAD/OPTIONS/TRACE] - 200, 401, 403, 404, 405 ..

* GET/HEAD/OPTIONS/TRACE 메소드는 서버의 데이터를 읽기만 진행하고,
PUT/DELETE/PATCH 데이터의 변경을 요청하는 메소드



4) HTTP Headers
-Stateless Protocol : HTTP는 상태정보를 저장하지 않는
                     프로토콜이므로 서버에 대한 인증을 필요시 얻어야함
-Cookies & Session
|------> 브라우저

 



 
                  

                

    

    
